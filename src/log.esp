void extern mqtt_publish_event(JsonObject *root);

void ICACHE_FLASH_ATTR writeEvent(String type, String src, String desc, String data) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = type;
	root["src"] = src;
	root["desc"] = desc;
	root["data"] = data;
	root["time"] = now();
	if ((mqttEvents) && (mqttenabled==1)){  // log to MQTT
        root["cmd"] = "event";
		root["door"] = deviceHostname;																																																																					
		mqtt_publish_event(&root);
	}
	else  // log to file
	{
		File eventlog = SPIFFS.open("/eventlog.json", "a");
		root.printTo(eventlog);
		eventlog.print("\n");
		eventlog.close();
	}
}

size_t lastPos;   // position counter for fast seek

void ICACHE_FLASH_ATTR writeLatest(String uid, String username, int acctype) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["uid"] = uid;
	root["username"] = username;
	root["acctype"] = acctype;
	root["timestamp"] = now();
	if ((mqttEvents) && (mqttenabled==1)){  // log to MQTT
        //root["cmd"] = "access";
		//mqtt_publish_event(&root);
	}
	else  // log to file
	{
		File latestlog = SPIFFS.open("/latestlog.json", "a");
		root.printTo(latestlog);
		latestlog.print("\n");
		latestlog.close();
	}
}



void ICACHE_FLASH_ATTR sendEventLog(int page) {

	// if we are reading the first page then we reset
	// the position counter 

	if (page ==1) lastPos=0;
	float pages;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["command"] = "eventlist";
	root["page"] = page;
	JsonArray &items = root.createNestedArray("list");
	File eventlog = SPIFFS.open("/eventlog.json", "r");

	// move the file pointer to the last known position

	eventlog.seek(lastPos);
	int numLines=0;

	// read in 10 lines or until EOF whatever happens first 

	while (eventlog.available() && (numLines < 10))
	{
		String item = String();
		item = eventlog.readStringUntil('\n');
		items.add(item);
		numLines++;
	}

	// remember the last position

	lastPos = eventlog.position();

	// calculate the number of remaining pages

	if (eventlog.available()) // tell bootstrap footable on the client side that there are more pages to come
	{
		float bytesPerPageRoughly = (lastPos / page);
		float totalPagesRoughly = eventlog.size () / bytesPerPageRoughly;
		pages= totalPagesRoughly < page ? page + 1 : totalPagesRoughly ; 
	}
	else pages=page; // this was the last page

	eventlog.close();
	root["haspages"] = ceil(pages);
	size_t len = root.measureLength();
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer) {
		root.printTo((char *)buffer->get(), len + 1);
		ws.textAll(buffer);
		ws.textAll("{\"command\":\"result\",\"resultof\":\"eventlist\",\"result\": true}");
	}
}

void ICACHE_FLASH_ATTR sendLatestLog(int page) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["command"] = "latestlist";
	root["page"] = page;
	JsonArray &items = root.createNestedArray("list");
	File latestlog = SPIFFS.open("/latestlog.json", "r");
	int first = (page - 1) * 10;
	int last = page * 10;
	int i = 0;
	while (latestlog.available()) {
		String item = String();
		item = latestlog.readStringUntil('\n');
		if (i >= first && i < last) {
			items.add(item);
		}
		i++;
	}
	latestlog.close();
	float pages = i / 10.0;
	root["haspages"] = ceil(pages);
	size_t len = root.measureLength();
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer) {
		root.printTo((char *)buffer->get(), len + 1);
		ws.textAll(buffer);
		ws.textAll("{\"command\":\"result\",\"resultof\":\"latestlist\",\"result\": true}");
	}
}